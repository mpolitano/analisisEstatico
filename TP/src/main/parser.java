
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 29 13:53:46 ART 2019
//----------------------------------------------------

package main;

import java_cup.runtime.*;
import java.io.FileReader;
import ast.*;
import java.util.*;
import java_cup.runtime.Symbol;
import java.util.Stack;
import java_cup.runtime.SymbolFactory;
import java_cup.runtime.Scanner;
import java_cup.runtime.lr_parser;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 29 13:53:46 ART 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\017\000\002\010\007\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\004\000\002\004\006" +
    "\000\002\004\010\000\002\004\005\000\002\004\005\000" +
    "\002\006\004\000\002\006\002\000\002\005\005\000\002" +
    "\007\003\000\002\007\003\000\002\007\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\004\014\004\001\002\000\004\013\uffff\001" +
    "\002\000\004\013\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\000\001\002\000\004\010\011\001\002\000" +
    "\012\005\017\012\016\013\013\021\014\001\002\000\014" +
    "\005\017\011\ufffe\012\016\013\013\021\014\001\002\000" +
    "\004\017\043\001\002\000\006\013\021\015\023\001\002" +
    "\000\004\011\040\001\002\000\006\013\021\015\023\001" +
    "\002\000\004\006\020\001\002\000\006\013\021\015\023" +
    "\001\002\000\012\007\ufff5\010\ufff5\016\ufff5\020\ufff5\001" +
    "\002\000\006\007\024\020\025\001\002\000\012\007\ufff4" +
    "\010\ufff4\016\ufff4\020\ufff4\001\002\000\004\010\027\001" +
    "\002\000\006\013\021\015\023\001\002\000\012\007\ufff3" +
    "\010\ufff3\016\ufff3\020\ufff3\001\002\000\012\005\017\012" +
    "\016\013\013\021\014\001\002\000\016\004\032\005\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\021\ufff7\001\002\000\014\005" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\021\ufffb\001\002\000\004" +
    "\010\027\001\002\000\014\005\ufff8\011\ufff8\012\ufff8\013" +
    "\ufff8\021\ufff8\001\002\000\004\011\035\001\002\000\016" +
    "\004\ufff6\005\ufff6\011\ufff6\012\ufff6\013\ufff6\021\ufff6\001" +
    "\002\000\006\010\027\020\025\001\002\000\014\005\ufffa" +
    "\011\ufffa\012\ufffa\013\ufffa\021\ufffa\001\002\000\004\002" +
    "\001\001\002\000\006\016\042\020\025\001\002\000\014" +
    "\005\ufff9\011\ufff9\012\ufff9\013\ufff9\021\ufff9\001\002\000" +
    "\006\013\021\015\023\001\002\000\006\016\045\020\025" +
    "\001\002\000\014\005\ufffc\011\ufffc\012\ufffc\013\ufffc\021" +
    "\ufffc\001\002\000\004\011\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\006\002\004\010\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\014\004\011\001\001\000" +
    "\006\003\045\004\011\001\001\000\002\001\001\000\004" +
    "\007\040\001\001\000\002\001\001\000\004\007\035\001" +
    "\001\000\002\001\001\000\004\007\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\027\001\001\000\004\007\025\001\001\000\002\001\001" +
    "\000\006\003\033\004\011\001\001\000\004\006\030\001" +
    "\001\000\002\001\001\000\004\005\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
    public void syntax_error(Symbol s){
        System.err.println("\n\nSyntax Error - line: " +  (s.left+1) +  " - value:" + s.value);
        
    }


    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {    
         System.err.println("\n\nUnrecovered Syntax error line: " +  (s.left+1) +  " - value:" + s.value);
    }
                                 	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPR ::= EXPR PLUS EXPR 
            {
              Expression RESULT =null;
		int lexprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression lexpr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BinOpType op = (BinOpType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rexprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rexprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression rexpr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new BinOpExpr(lexpr,op,rexpr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPR ::= INT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IntLiteral l = (IntLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPR ::= ID 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Variable(l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BLOCK ::= LLAB STATAMENT_STAR LLCER 
            {
              Block RESULT =null;
		int listStatamentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listStatamentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Statement> listStatament = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                               RESULT= new Block(listStatament); 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOCK",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ELSE_OPTIONAL ::= 
            {
              Block RESULT =null;
		RESULT= null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_OPTIONAL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ELSE_OPTIONAL ::= ELSE BLOCK 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_OPTIONAL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATAMENT ::= RETURN EXPR PUNTOCOMA 
            {
              Statement RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ReturnStmt rt = (ReturnStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		rt.setExpression(expr); RESULT=rt ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATAMENT",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATAMENT ::= WHILE EXPR BLOCK 
            {
              Statement RESULT =null;
		int boolExprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int boolExprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression boolExpr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new WhileStmt(boolExpr,body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATAMENT",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATAMENT ::= IF PARENIZQ EXPR PARENDER BLOCK ELSE_OPTIONAL 
            {
              Statement RESULT =null;
		int boolExprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int boolExprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression boolExpr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int else_optionalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int else_optionalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block else_optional = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new IfStmt(boolExpr,b,else_optional);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATAMENT",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STATAMENT ::= ID ASSIG EXPR PUNTOCOMA 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new AssignStmt(id,expr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATAMENT",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STATAMENT_STAR ::= STATAMENT STATAMENT_STAR 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listStatamentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listStatamentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Statement> listStatament = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listStatament.addFirst(s); RESULT=listStatament;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATAMENT_STAR",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STATAMENT_STAR ::= STATAMENT 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new LinkedList<Statement>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATAMENT_STAR",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TYPE ::= RESERV_INT 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAM ::= TYPE ID LLAB STATAMENT_STAR LLCER 
            {
              Program RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listFieldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listFieldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Statement> listField = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                  RESULT= new Program(t,id,listField);
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

