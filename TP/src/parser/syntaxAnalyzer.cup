package main;
import java_cup.runtime.*;
import java.io.FileReader;
import ast.*;
import java.util.*;
import java_cup.runtime.Symbol;
import java.util.Stack;
import java_cup.runtime.SymbolFactory;
import java_cup.runtime.Scanner;
import java_cup.runtime.lr_parser;


parser code {:
	
    public void syntax_error(Symbol s){
        System.err.println("\n\nSyntax Error - line: " +  (s.left+1) +  " - value:" + s.value);
        
    }


    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {    
         System.err.println("\n\nUnrecovered Syntax error line: " +  (s.left+1) +  " - value:" + s.value);
    }
                                 	
:}

  
   
// Terminales (tokens obtenidos por el analizador lexico).  

terminal  ELSE, IF, PARENIZQ, PARENDER,LLAB, LLCER, WHILE;

terminal String ID;
terminal INT;
terminal PUNTOCOMA;
terminal AssignOpType ASSIG;
terminal BinOpType  PLUS;
terminal ReturnStmt RETURN;


// No Terminales (producciones).  
                        
non terminal Type TYPE;
terminal Integer INTEGER;
non terminal LinkedList<Statement> STATAMENT_STAR;
non terminal Statement STATAMENT;
non terminal Block BLOCK;
non terminal Block ELSE_OPTIONAL;
non terminal Expression EXPR;
non terminal Program PROGRAM;




precedence left  PLUS;
precedence left PARENIZQ, PARENDER;


// -------------Seccion de predencia y asociacion de los terminales----------- 


// ------------------- Seccion de la gramatica ------------------------ 
   
// La gramatica 




PROGRAM ::=             TYPE:t ID:id PARENIZQ PARENDER LLAB STATAMENT_STAR:listField LLCER {: 
                                  RESULT= new Program(t,id,listField);
                                :};
TYPE ::=                 INT
;
			



STATAMENT_STAR  ::=     STATAMENT:s {:RESULT=new LinkedList<Statement>();:} 
                        | STATAMENT:s STATAMENT_STAR:listStatament {: listStatament.addFirst(s); RESULT=listStatament;:};





STATAMENT ::= 	        	ID:id ASSIG EXPR:expr PUNTOCOMA{:RESULT= new AssignStmt(id,expr);:}
                			| IF PARENIZQ EXPR:boolExpr PARENDER BLOCK:b ELSE_OPTIONAL:else_optional{:RESULT= new IfStmt(boolExpr,b,else_optional);:}
              			    | WHILE EXPR:boolExpr BLOCK:body{:RESULT= new WhileStmt(boolExpr,body);:}
              			    | RETURN:rt EXPR:expr PUNTOCOMA{:rt.setExpression(expr); RESULT=rt ;:} ;


ELSE_OPTIONAL  ::=      ELSE BLOCK:b{:RESULT= b;:}
			               		|{:RESULT= null;:} ;					

BLOCK  ::=              LLAB STATAMENT_STAR:listStatament LLCER
                            {:
                               RESULT= new Block(listStatament); 
                            :};
                        
                     


//ASSING_OP  ::=         ASSIG:asign{: RESULT=asign;:};



EXPR  ::= 		         ID:l {:RESULT= new Variable(l);:}
                		| INTEGER:i{:Expression e = new IntLiteral(i);  RESULT= e;:}             			
                        | EXPR:lexpr PLUS:op EXPR:rexpr{:RESULT= new BinOpExpr(lexpr,op,rexpr);:} ;

